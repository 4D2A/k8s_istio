- name: Assertions
  assert:
    that:
      - k8s_primary_master_name is defined
      - k8s_node_type is defined
  tags: [never, apply, delete]


- name: Check Istio installation status
  stat:
    path: "{{ k8s_istio_bin }}"
  register: _k8s_istio_bin
  when:
    - k8s_node_type == "master"
  tags: [never, apply, delete]


- name: Check deployed Istio version
  shell:
    kubectl get -n istio-system service/istio-pilot -o jsonpath='{.metadata.labels.operator\.istio\.io\/version}'
  register: _k8s_istio_version_deployed
  failed_when:
    - _k8s_istio_version_deployed.rc !=0 and not "NotFound" in _k8s_istio_version_deployed.stderr
  when:
    - k8s_node_type == "master"
  tags: [never, apply, delete]


- name: Create Istio custom resources backup file
  tempfile:
    state: file
  register: _k8s_istio_resources
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply, delete]


- name: Backup Istio custom resources
  shell: |
    kubectl get -A vs,gateway -o yaml --field-selector=metadata.name!=ingressgateway > {{ _k8s_istio_resources.path }}
  when:
    - inventory_hostname == k8s_primary_master_name
  register: _k8s_istio_backup_resource
  failed_when:
    - _k8s_istio_backup_resource.rc != 0 and not "the server doesn't have a resource type" in _k8s_istio_backup_resource.stderr
  tags: [never, apply, delete]


- debug:
    msg: "Istio custom resources saved on {{ inventory_hostname }} at {{ _k8s_istio_resources.path }}"
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply, delete]


- name: Remove current Istio deployment
  include_tasks:
    file: delete.yml
    apply: { tags: [ delete ] }
  vars:
    k8s_istio_root: "{{ k8s_istio_install_dir }}/istio-{{ _k8s_istio_version_deployed.stdout }}"
    k8s_istio_bin: "{{ k8s_istio_root }}/bin/istioctl"
  when:
    - inventory_hostname == k8s_primary_master_name
    - _k8s_istio_version_deployed.rc == 0
    - _k8s_istio_version_deployed.stdout != k8s_istio_version
  tags: [never, apply]


- name: Handle Istio deployment
  include_tasks:
    file: apply.yml
    apply: { tags: [ apply ] }
  tags: [never, apply]


- name: Handle custom IngressGateway
  include_tasks:
    file: ingressgw.yml
  when:
    - inventory_hostname == k8s_primary_master_name
    - k8s_istio_ingressgw_custom | length > 0
  tags: [never, apply, delete]


- name: Apply custom manifests
  k8s:
    state: present
    definition: "{{ lookup('template', 'custom/' + item + '.yml.j2') }}"
  with_items: "{{ k8s_istio_custom_manifests }}"
  ignore_errors: yes
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply]


- name: Restore Istio active resources
  shell:
    kubectl apply -f {{ _k8s_istio_resources.path }}
  when:
    - inventory_hostname == k8s_primary_master_name
    - _k8s_istio_version_deployed.rc == 0
    - _k8s_istio_version_deployed.stdout != k8s_istio_version
  tags: [never, apply]


- name: Rollout restart deployments
  shell: >
    kubectl rollout restart deployments -n {{ item }}
  with_items: "{{ k8s_istio_sidecar_namespaces }}"
  when:
    - inventory_hostname == k8s_primary_master_name
    - _k8s_istio_version_deployed.rc == 0
    - _k8s_istio_version_deployed.stdout != k8s_istio_version
  tags: [never, apply]


- name: Delete custom manifests
  k8s:
    state: absent
    definition: "{{ lookup('template', 'custom/' + item + '.yml.j2') }}"
  with_items: "{{ k8s_istio_custom_manifests }}"
  ignore_errors: yes
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply]


- name: Handle Istio removal
  include_tasks:
    file: delete.yml
    apply: { tags: [ delete ] }
  tags: [never, delete]


- name: Uninstall Istio
  file:
    path: "{{ k8s_istio_install_dir }}"
    state: absent
  when:
    - k8s_node_type == "master"
  tags: [never, remove]
